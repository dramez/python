# file_utils.py

import os

OUTPUT_DIR = "output" # You can change this to '_YT2TXT_output' if you prefer

def ensure_output_directory():
    """
    Ensures that the output directory exists, creating it if necessary.
    """
    if not os.path.exists(OUTPUT_DIR):
        try:
            os.makedirs(OUTPUT_DIR)
            print(f"Created directory: {OUTPUT_DIR}")
        except OSError as e:
            print(f"Error creating directory {OUTPUT_DIR}: {e}")

def sanitize_model_name(model_name: str) -> str:
    """
    Sanitizes the Ollama model name for use in filenames.
    Replaces colons with hyphens.
    """
    return model_name.replace(":", "-")

def save_to_file(content: str, base_file_name_part: str, video_id: str, timestamp: str, ollama_model_name: str):
    """
    Saves the given content to a file in the OUTPUT_DIR,
    with a name including video_id, timestamp, and Ollama model name.

    Args:
        content (str): The text content to save.
        base_file_name_part (str): The base part of the filename (e.g., "original_transcript").
        video_id (str): The YouTube video ID.
        timestamp (str): The timestamp string.
        ollama_model_name (str): The name of the Ollama model used.
    """
    ensure_output_directory()

    safe_video_id = video_id if video_id else "unknown_video"
    sanitized_model_name = sanitize_model_name(ollama_model_name)

    # Construct filename: videoID_timestamp_ollamaModel_fileType.txt
    # Note: For transcript files, ollama_model_name might seem redundant but helps keep a consistent naming scheme
    # if all files from one run should share common identifiers.
    # If ollama_model_name is only relevant for summary files, this logic could be adjusted in main.py
    # For now, it's included in all filenames generated by this function.
    filename = f"{safe_video_id}_{timestamp}_{sanitized_model_name}_{base_file_name_part}.txt"
    filepath = os.path.join(OUTPUT_DIR, filename)

    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(content)
        print(f"Successfully saved to {filepath}")
    except IOError as e:
        print(f"Error saving file {filepath}: {e}")
    except Exception as e:
        print(f"An unexpected error occurred while saving {filepath}: {e}")